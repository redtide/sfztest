{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p><sub><sup>kinwie edited this page on 1 Jun 2020 \u00b7 1 revision</sup></sub></p> <p>hello git world!</p>"},{"location":"Cymbal-choke-test-for-edrums-and-keyboard-mapping-mode/","title":"Cymbal choke test for edrums and keyboard mapping mode","text":"<p><sub><sup>kinwie edited this page on 13 Jun 2020 \u00b7 11 revisions</sup></sub></p> <p>This is a test in Plogue sforzando, describe a proper cymbal choke programming, for both edrums and keyboard mapping mode, and also to pursue the unavailable yet <code>on_locc133</code> and <code>on_hicc133</code> or <code>on_key</code> opcode.</p> <p>More info about Extended CC : https://sfzformat.com/extensions/midi_ccs</p> <p>The test file for this is \"Cymbal choke test.sfz\". A MIDI file, \"Cymbal choke test.mid\" also available for a \"quick play\". The samples used are a crash sample and a crash choke/tail sample. The sfz test file consist of 5 examples in Keyswitch to show and compare each case :</p>"},{"location":"Cymbal-choke-test-for-edrums-and-keyboard-mapping-mode/#1-regular-mapping","title":"1. Regular mapping","text":"<ul> <li>This is a simple/common-type of cymbal choke programming. Crash at note G (key 55) will get muted by the choke at note F# (key 54). But since the choke sample is a crash tail, it will sounded everytime note F# is pressed and this is an unwanted issue.</li> </ul>"},{"location":"Cymbal-choke-test-for-edrums-and-keyboard-mapping-mode/#2-left-pedal-cc67","title":"2. Left Pedal CC67","text":"<ul> <li>This is a good example of cymbal choke programming by utilizing MIDI CC and taking advantage of <code>rt_decay</code> and <code>trigger=release</code> function. In this example, the used MIDI CC number is 67, which is can be accessed by sforzando's default Left Pedal. The choke key is moved to the same key as the crash, note G (key 55) and put into release trigger mode. Pressing the crash key will sounds normally. But then pressing the Left Pedal, the crash will get muted. After pressing the crash key, the more late you press the Left Pedal, the choke tail volume will also get lower, which is the advantage of <code>rt_decay</code> function. So, programming this way is working for sfz, then we just need to change the MIDI CC number to Polyphonic Aftertouch for edrums mode. For this example, there is an issue because the use of <code>on_lo/hiccN</code> opcode, which, the choke tail sample will play everytime the Left Pedal is pressed. So to prevent that, opcode <code>hicc131=126</code> has been added, but with the cost of crash at vel 127 won't get choked.</li> </ul>"},{"location":"Cymbal-choke-test-for-edrums-and-keyboard-mapping-mode/#3-polyphonic-aftertouch","title":"3. Polyphonic Aftertouch","text":"<ul> <li>Playing with edrums, the cymbal choke is done by grabbing the cymbal pad, which the edrums brain send the Polyphonic Aftertouch message to host. In this example, the Polyphonic Aftertouch is CC130 (the extended CC in sfz format). This example function the same as test No.2 and has been successfully tested with an edrums kit by @redtide. So, this example fits perfectly for edrums mapping mode.</li> </ul>"},{"location":"Cymbal-choke-test-for-edrums-and-keyboard-mapping-mode/#4-triggered-by-other-key","title":"4. Triggered by other key","text":"<ul> <li>By combining test No.1 and No.2, to have the choke at other key (54) but not sounded if pressed and to have the advantage of <code>rt_decay</code>, this example is much suitable for keyboard mapping mode (to play with keyboard controller or input note via host's piano roll). Though, this is a workaround for what should be works properly (in the 5th example). The issue is that, the crash key has to be keep pressed, then press choke key, then release the crash key to get it choked. In the example MIDI file, the crash note is longer, overlap a bit to the choke note. But it is works better rather than example No.1.</li> </ul>"},{"location":"Cymbal-choke-test-for-edrums-and-keyboard-mapping-mode/#5-by-other-key-cc133","title":"5. By other key CC133","text":"<ul> <li> <p>This example is not working yet, the crash won't get choked. It's for pursuing the <code>on_lo/hicc133</code> or <code>on_key</code> opcode implementation, so like example no.4 but without the issue mentioned above. The <code>on_lo/hicc133</code> value is written as 54, which assumed as key-number 54 (the choke trigger key number). Otherwise, using a new opcode <code>on_key</code>=54 could probably simplifying this kind of triggering.</p> </li> <li> <p>An additional workaround for example no.2 and no.3 can be made to solve the \"no choke at velocity 127\" issue by adding a *silence region to that vel-range with <code>locc131=127</code> <code>hicc131=127</code></p> </li> </ul>"},{"location":"How-Release-Trigger-Works-in-SFZ/","title":"How Release Trigger Works in SFZ","text":"<p><sub><sup>kinwie edited this page on 29 Oct 2020 \u00b7 11 revisions</sup></sub></p> <p>This is a short documentation for Release Trigger behaviors in 3 'major' SFZ players.</p> <p>The opcodes are : <code>trigger=release</code> and <code>trigger=release_key</code>. (See here : https://sfzformat.com/opcodes/trigger)</p> <p>Primary condition : Setting trigger to release or release_key will automatically set the region into one-shot mode. (More details here : https://sfzformat.com/opcodes/loop_mode)</p> <p>Here is the main difference of <code>release</code> and <code>release_key</code> in original sfz design by Rene Ceballos (implemented in rgc sfz and Cakewalk sfz players) that can be tested with this sequence of playing notes with sustain pedal down then release the notes :</p> <ul> <li><code>release</code> : The release samples will always play when releasing the sustain pedal</li> <li><code>release_key</code> : The release samples won't play when releasing the sustain pedal.   Release samples only play when sustain pedal is up (not depressed)</li> </ul>"},{"location":"How-Release-Trigger-Works-in-SFZ/#rgc-sfz","title":"rgc sfz","text":"<ul> <li>Both <code>release</code> or <code>release_key</code> plays without any previous attack region</li> <li>Both functioning as described above and respond to Sustain Pedal position</li> <li>In sfz v1, no <code>polyphony</code> or <code>note_polyphony</code> for limiting,   so repeated notes will have release voices as many as the attack notes,   when Sustain pedal is down, then release the pedal. This can be very annoying</li> </ul>"},{"location":"How-Release-Trigger-Works-in-SFZ/#dropzone-and-other-cakewalk-players","title":"DropZone and other Cakewalk players","text":"<ul> <li>Both <code>release</code> or <code>release_key</code> require previous attack region</li> <li>Both functioning as described above and respond to Sustain Pedal position</li> <li>To make <code>release</code> or <code>release_key</code> plays without any previous attack region, add <code>rt_dead</code>=on</li> <li>Opcode <code>note_polyphony</code> now available to control the release voices   of repeated notes when Sustain pedal is down, then release the pedal</li> </ul>"},{"location":"How-Release-Trigger-Works-in-SFZ/#plogue-sforzando-and-aria","title":"Plogue sforzando and ARIA","text":"<ul> <li><code>release</code> require previous attack region</li> <li><code>release_key</code> doesn't need previous attack region</li> <li><code>release</code> respond to Sustain Pedal position</li> <li><code>release_key</code> ignores Sustain Pedal</li> <li>Not supported <code>rt_dead</code>, default to off</li> <li>Same as DropZone, use <code>note_polyphony</code> to control release voices</li> </ul> <p>A simple sfz example :</p> <pre><code>&lt;control&gt;\ndefault_path=Samples\\\n\n//simple release trigger example (without note_polyphony)\n&lt;region&gt; key=60 sample=kick.wav\n&lt;region&gt; key=60 sample=snare.wav trigger=release\n//release-key in sforzando\n&lt;region&gt; key=62 sample=snare.wav trigger=release_key\n//release-key in Cakewalk players\n&lt;region&gt; key=64 sample=snare.wav trigger=release rt_dead=on\n//*note, Cakewalk players use backslash only\n</code></pre>"},{"location":"Issue-for-ampeg_release_oncc133/","title":"Issue for ampeg_release_oncc133","text":"<p><sub><sup>kinwie edited this page on 13 Jun 2020 \u00b7 11 revisions</sup></sub></p> <p>This is an example of a more \"sophisticated-yet-simplified\" envelope setting, reflect from the Inital version of Maestro Grand Piano sfz that I put at : https://github.com/sfzinstruments/MatsHelgesson.MaestroConcertGrandPiano Which was later changed to conventional setting because of an issue raised by the use of CC133 for <code>ampeg_release</code> when involving sustain pedal.</p> <p>That setting preserved in a test file \"Ampeg_oncc133 test.sfz\" for documentation purpose. The test file consist of 2 examples in keyswitch for comparison. Here's are the explanation for the extended CC usage for amplitude envelope and the problem scenario.</p> <p>The hold and decay are using CC133, like these :</p> <pre><code>ampeg_hold=0.5\nampeg_hold_oncc133=-0.5\nampeg_decay=20\nampeg_decay_oncc133=-20\n</code></pre> <p>Where the hold and decay time will decreased from lower key to higher key, longer to shorter.</p> <ul> <li>CC133 is the extended CC for keyboard note number.</li> <li>In the 1st keyswitch example : Dampened high-notes, the release also use CC133 :</li> </ul> <pre><code>ampeg_release=2\nampeg_release_oncc133=-2\n</code></pre> <p>This scenario didn't have too much noticed issue with the sustain pedal use.</p> <ul> <li>In the 2nd keyswitch example : Undampened high-notes, which is typical for piano release setting, like this :</li> </ul> <pre><code>ampeg_release_oncc131=0.4\nampeg_release_oncc133=5\nampeg_release_curvecc133=7\n</code></pre> <p>With the custom curve :</p> <pre><code>curve_index=7\nv021=0.4\nv036=0.08\nv084=0.08\nv090=0.4\nv091=1\nv108=1\n</code></pre> <p>Using CC131 (note-on velocity) is for making the release time increase from lovel to hivel, 0 to +0.4 seconds. For CC133 with value at 5 seconds, it utilize the use of custom curve definition to shape the release time across key-range.</p> <ul> <li>At key 21, will have release time 2 seconds and decrease to key 36</li> <li>At key 36 to 84, release time 0.4 seconds</li> <li>At key 90, release time 2 seconds, increased from key 84</li> <li>At key 91 to 108, release time 5 seconds</li> </ul> <p>At the moment, this kind of setting will have issue when using the sustain pedal. The issue was found by @jlearman, with action sequence as :</p> <ul> <li>Hold sustain pedal down</li> <li>Press low note (e.g. 60/C) and release</li> <li>Press Undampened high-note (e.g. 91/G) and release</li> <li>Release sustain pedal</li> </ul> <p>The low note C continues to ring, which is supposed off.</p> <p>So, this documentation posted for future reminder if similar case occurred using CC133.</p>"},{"location":"Polyaft-choke-with-velocity-range-part-2/","title":"Polyaft choke with velocity range part 2","text":"<p><sub><sup>kinwie edited this page on 13 Jun 2020 \u00b7 2 revisions</sup></sub></p> <p>Advancing previous cymbal choke test, here's an example to set the release-triggered with multi-velocities samples. The test file for this is \"Polyaft choke velocity.sfz\", consist of 2 keyswitches example. One using Left Pedal for easy testing just within sforzando's GUI and the second is using Polyphonic Aftertouch CC130 for edrums mapping mode.</p> <p>First, notice that <code>lovel</code> and <code>hivel</code> are not working for this kind of CC usage. So for that replacement, we use <code>locc131</code> and <code>hicc131</code> which are the extended CC for note-on velocity and they will works. The release-trigger samples used are snare, kick and choke for easier sound-identifying.</p> <p>Performing this test is very simple, just like this :</p> <ul> <li>Soft hit, velocity 0 - 42 : the choke sound is snare sample</li> <li>Medium hit, velocity 43 - 84 : the choke sound is kick sample</li> <li>Hard hit, velocity 85 - 126 : the choke sound is choke sample</li> </ul> <p>Last notice, is that the choke highest velocity is set to 126 to prevent it sounding without the crash hit first.</p> <ul> <li>An additional workaround can be made to solve the \"no choke at velocity 127\" issue   by adding a <code>*silence</code> region to that vel-range with <code>locc131=127</code> <code>hicc131=127</code></li> </ul>"},{"location":"sfizz-part-1-seq_-and-_rand/","title":"sfizz part 1 seq_ and _rand","text":"<p><sub><sup>kinwie edited this page on 12 Nov 2020 \u00b7 12 revisions</sup></sub></p>"},{"location":"sfizz-part-1-seq_-and-_rand/#sfizz-improved-behavior-part-1","title":"sfizz improved behavior - part 1","text":"<p>sfizz is a new free sfz player in a very active development stage. At this moment of writing, it is in beta version 0.5.1. More information here : https://sfz.tools/sfizz/</p>"},{"location":"sfizz-part-1-seq_-and-_rand/#combination-of-seq_-and-_rand","title":"Combination of seq_ and _rand","text":"<p>Using round-robin <code>seq_length</code>, <code>seq_position</code> along with random trigger <code>lorand</code>, <code>hirand</code> in some other sfz players mostly result in complete randomness. The intention to combine these two functions in practical usage is to be able to retain the sequence counter of articulations alternation, e.g. up-bow and down-bow of violin, or left-hit and right-hit of snare drum, while each articulation also has random samples. Combining these two functions in sfizz will result a proper triggered sounds, where the alternation seq_ will be retained well and randomness _rand also will be keep going on.</p> <p>Here is an example to check the details of this behavior. Notice that <code>seq_position</code> are placed on <code>&lt;group&gt;</code> (higher header) and <code>lorand/hirand</code> are placed on <code>&lt;region&gt;</code> (lower header) The sounds will always alternate between human voice and drums hit :</p> <pre><code>&lt;global&gt;\nloop_mode=one_shot\nkey=60\nseq_length=2\n//human voice count\n&lt;group&gt; seq_position=1\n&lt;region&gt; lorand=0.0 hirand=0.1 sample=count_01.wav\n&lt;region&gt; lorand=0.1 hirand=0.2 sample=count_02.wav\n&lt;region&gt; lorand=0.2 hirand=0.3 sample=count_03.wav\n&lt;region&gt; lorand=0.3 hirand=0.4 sample=count_04.wav\n&lt;region&gt; lorand=0.4 hirand=0.5 sample=count_05.wav\n&lt;region&gt; lorand=0.5 hirand=0.6 sample=count_06.wav\n&lt;region&gt; lorand=0.6 hirand=0.7 sample=count_07.wav\n&lt;region&gt; lorand=0.7 hirand=0.8 sample=count_08.wav\n&lt;region&gt; lorand=0.8 hirand=0.9 sample=count_09.wav\n&lt;region&gt; lorand=0.9 hirand=1.0 sample=count_10.wav\n//drums hit\n&lt;group&gt; seq_position=2\n&lt;region&gt; lorand=0.00 hirand=0.25 sample=kick.wav\n&lt;region&gt; lorand=0.25 hirand=0.50 sample=snare.wav\n&lt;region&gt; lorand=0.50 hirand=0.75 sample=hat.wav\n&lt;region&gt; lorand=0.75 hirand=1.00 sample=crash.wav\n</code></pre> <p>OTOH, by reversing the placement, <code>_rand</code> then <code>seq_</code>, the result will be a fully randomness, like \"the usual\" implementation :</p> <pre><code>&lt;global&gt;\nloop_mode=one_shot\nkey=60\n//human voice count\n&lt;group&gt; seq_length=10 hirand=0.5\n&lt;region&gt; seq_position=01 sample=count_01.wav\n&lt;region&gt; seq_position=02 sample=count_02.wav\n&lt;region&gt; seq_position=03 sample=count_03.wav\n&lt;region&gt; seq_position=04 sample=count_04.wav\n&lt;region&gt; seq_position=05 sample=count_05.wav\n&lt;region&gt; seq_position=06 sample=count_06.wav\n&lt;region&gt; seq_position=07 sample=count_07.wav\n&lt;region&gt; seq_position=08 sample=count_08.wav\n&lt;region&gt; seq_position=09 sample=count_09.wav\n&lt;region&gt; seq_position=10 sample=count_10.wav\n//drums hit\n&lt;group&gt; seq_length=4 lorand=0.5\n&lt;region&gt; seq_position=01 sample=kick.wav\n&lt;region&gt; seq_position=02 sample=snare.wav\n&lt;region&gt; seq_position=03 sample=hat.wav\n&lt;region&gt; seq_position=04 sample=crash.wav\n</code></pre> <p>Another improved trigger logic in sfizz is that, the regions doesn't need to be fall on the same velocity boundaries between round-robin groups. This below example will be properly triggered without any \"hole\" :</p> <pre><code>&lt;global&gt;\nloop_mode=one_shot\nkey=60\nseq_length=2\namp_veltrack=0\n//human voice count\n&lt;group&gt; seq_position=1\n&lt;region&gt; lovel=001 hivel=012 sample=count_01.wav\n&lt;region&gt; lovel=013 hivel=025 sample=count_02.wav\n&lt;region&gt; lovel=026 hivel=037 sample=count_03.wav\n&lt;region&gt; lovel=038 hivel=050 sample=count_04.wav\n&lt;region&gt; lovel=051 hivel=063 sample=count_05.wav\n&lt;region&gt; lovel=064 hivel=076 sample=count_06.wav\n&lt;region&gt; lovel=077 hivel=089 sample=count_07.wav\n&lt;region&gt; lovel=090 hivel=101 sample=count_08.wav\n&lt;region&gt; lovel=102 hivel=114 sample=count_09.wav\n&lt;region&gt; lovel=115 hivel=127 sample=count_10.wav\n//drums hit\n&lt;group&gt; seq_position=2\n&lt;region&gt; lovel=001 hivel=031 sample=kick.wav\n&lt;region&gt; lovel=032 hivel=063 sample=snare.wav\n&lt;region&gt; lovel=064 hivel=095 sample=hat.wav\n&lt;region&gt; lovel=096 hivel=127 sample=crash.wav\n</code></pre>"},{"location":"sfizz-part-2-group-and-off_by/","title":"sfizz part 2 <code>group</code> and <code>off_by</code>","text":"<p><sub><sup>kinwie edited this page on 12 Nov 2020 \u00b7 12 revisions</sup></sub></p>"},{"location":"sfizz-part-2-group-and-off_by/#sfizz-improved-behavior-part-2","title":"sfizz improved behavior - part 2","text":"<p>sfizz is a new free sfz player in a very active development stage. At this moment of writing, it is in beta version 0.5.1. More information here : https://sfz.tools/sfizz/</p>"},{"location":"sfizz-part-2-group-and-off_by/#no-self-choking-with-same-group-and-off_by","title":"No self-choking with same <code>group</code> and <code>off_by</code>","text":"<p>There are two different implementations on the \"_exclusive group/choke group behaviors which use <code>group</code> and <code>off_by</code> opcodes for muting function, e.g. hihats and cymbals choke, etc, which mostly played as <code>one_shot</code></p> <ul> <li> <p>In original rgc sfz design (and also Cakewalk players), using same number   for <code>group</code> and <code>off_by</code> won't make the region (same key) self-choking   (muted by itself), which means the region/key is polyphonic,   but it will get choked by different keys of the same <code>group</code>.   This behavior is good and quick for setting choke groups between different keys only.   But it has one issue since it can't choke on the same key,   e.g, on a common hihats programming (for eDrums) using CC4 Foot Controller   to switch between articulations that put all on one key.   A simple example : Closed hihats that put on <code>locc4=0</code> <code>hicc4=63</code> can't choke   the Open hihats that put on <code>locc4=64</code> <code>hicc4=127</code>, which both on key 42.</p> </li> <li> <p>ARIA/sforzando has more strictly behavior. When the <code>group</code> and <code>off_by</code>   has the same number, the region/key will self-choking, which means it became monophonic.   Though it's logically correct, it could make a simple choke setting became   more complex when polyphonic is wanted.   But it also solved that \"Same key with CC\" programming issue.</p> </li> </ul> <p>Then sfizz combines the best of both and result in much more flexible behavior.</p> <ul> <li>Using same number for <code>group</code> and <code>off_by</code> in sfizz won't make the key self-choking,   so it's polyphonic. This also solved the \"monophonic\" sound issue cause   by auto-converted sfz instruments, which it usually exported with the same numbers,   e.g. sfz that are converted from sf2.</li> <li>For CC programming to use with eDrums, mostly for controlling hihats articulations   also working great with sfizz. Assign each articulation to each <code>group</code> number   and then assign different numbers for the <code>off_by</code>.   This can be a bit more complex when more articulations are used,   e.g. if you have like, 5 to 8 hihats openness degree   (Tight, Closed, Quarter, Half, 3/4 open, Full open, etc.).   Maybe some other article to go more in-depth for this kind of settings.</li> </ul> <p>To quick and simple identifying this behavior, try this example below (using crash samples for more easier to notice) :</p> <pre><code>&lt;region&gt;\nsample=crash.wav\nloop_mode=one_shot\nkey=60\ngroup=1\noff_by=1\n</code></pre> <p>Test that example in sforzando, play key 60 fast and you will hear the crash sounded cut-off monophonic. Try the same action in sfizz and you will hear the crash is ringing loosely as it's supposed to.</p> <p>So, to get that same \"monophonic\" cut-off sound in sfizz, just simply use <code>polyphony=1</code> :</p> <pre><code>&lt;region&gt;\nsample=crash.wav\nloop_mode=one_shot\nkey=60\ngroup=1\npolyphony=1\n</code></pre> <p>Then a simple example for that \"Hihats CC4 programming\" can be like this (using different numbers) :</p> <pre><code>&lt;global&gt;\nkey=42\n&lt;group&gt; loop_mode=one_shot\n&lt;region&gt; locc4=000 hicc4=025 group=1 off_by=6 sample=HH_open.wav\n&lt;region&gt; locc4=026 hicc4=050 group=2 off_by=7 sample=HH_3_4.wav\n&lt;region&gt; locc4=051 hicc4=076 group=3 off_by=8 sample=HH_half.wav\n&lt;region&gt; locc4=077 hicc4=101 group=4 off_by=9 sample=HH_1_4.wav\n&lt;region&gt; locc4=102 hicc4=127 group=5 sample=HH_closed.wav\n&lt;group&gt; end=-1 sample=*silence\n&lt;region&gt; locc4=026 hicc4=127 group=6\n&lt;region&gt; locc4=051 hicc4=127 group=7\n&lt;region&gt; locc4=077 hicc4=127 group=8\n&lt;region&gt; locc4=102 hicc4=127 group=9\n</code></pre>"},{"location":"sfizz-part-3-pitch_keycenter%3Dsample/","title":"sfizz part 3 <code>pitch_keycenter=sample</code>","text":"<p><sub><sup>kinwie edited this page on 12 Nov 2020 \u00b7 7 revisions</sup></sub></p> <p>sfizz is a new free sfz player in a very active development stage. At this moment of writing, it is in beta version 0.5.1. More information here : https://sfz.tools/sfizz/</p>"},{"location":"sfizz-part-3-pitch_keycenter%3Dsample/#pitch_keycentersample","title":"<code>pitch_keycenter=sample</code>","text":"<p>This less-known and less-used <code>pitch_keycenter=sample</code> is a very helpful opcode to tidy-up some complex sfz programming. A details can be read here : https://sfzformat.com/opcodes/pitch_keycenter It's a beta opcode since sfz v1 specs and implemented in rgc sfz and Cakewalk players. Sforzando support it and now sfizz also fully support it since sfizz v0.5.0 with an exclusive behavior.</p> <p>pitch_keycenter=sample opcode use root key metadata that available inside sample file (wav/aiff), similar to loop metadata. So to use this opcode, the samples need to be well-edited and put the root key info properly. This can be done with audio editors like Wavosaur, Audacity, etc.</p> <p>This is the description of how it works among players :</p> <ul> <li>rgc sfz and Cakewalk players : It works at all headers and   can't be override by <code>key</code> nor <code>pitch_keycenter=N</code></li> <li>sforzando : It works only at <code>&lt;region&gt;</code> header and can get override   by <code>key</code> and <code>pitch_keycenter=N</code></li> <li>sfizz : It works at all headers and can be override only by <code>pitch_keycenter=N</code>.   It also can be used for Flac samples.</li> </ul> <p>An example in practical use case, is for creating a \"neighbor round-robin\", which an instrument has samples for every key, then shift the key mapping up and down. Editing this kind of mapping can be easily done with a text editor that has a column-edit feature, like Notepad++. Here's a simplified example without using <code>pitch_keycenter=sample</code>, where we need to add another <code>pitch_keycenter</code> to the shifted samples to retain the root key (because the use of <code>key</code>). This example only shows 10 samples, imagine when you have thousand of samples you want to shift-mapped like this.</p> <pre><code>&lt;global&gt;\nseq_length=3\n&lt;group&gt; seq_position=1\n&lt;region&gt; key=49 sample=alto_01.wav\n&lt;region&gt; key=50 sample=alto_02.wav\n&lt;region&gt; key=51 sample=alto_03.wav\n&lt;region&gt; key=52 sample=alto_04.wav\n&lt;region&gt; key=53 sample=alto_05.wav\n&lt;region&gt; key=54 sample=alto_06.wav\n&lt;region&gt; key=55 sample=alto_07.wav\n&lt;region&gt; key=56 sample=alto_08.wav\n&lt;region&gt; key=57 sample=alto_09.wav\n&lt;region&gt; key=58 sample=alto_10.wav\n&lt;group&gt; seq_position=2\n&lt;region&gt; key=49 pitch_keycenter=50 sample=alto_02.wav\n&lt;region&gt; key=50 pitch_keycenter=51 sample=alto_03.wav\n&lt;region&gt; key=51 pitch_keycenter=52 sample=alto_04.wav\n&lt;region&gt; key=52 pitch_keycenter=53 sample=alto_05.wav\n&lt;region&gt; key=53 pitch_keycenter=54 sample=alto_06.wav\n&lt;region&gt; key=54 pitch_keycenter=55 sample=alto_07.wav\n&lt;region&gt; key=55 pitch_keycenter=56 sample=alto_08.wav\n&lt;region&gt; key=56 pitch_keycenter=57 sample=alto_09.wav\n&lt;region&gt; key=57 pitch_keycenter=58 sample=alto_10.wav\n&lt;region&gt; key=58 pitch_keycenter=56 sample=alto_08.wav\n&lt;group&gt; seq_position=3\n&lt;region&gt; key=49 pitch_keycenter=51 sample=alto_03.wav\n&lt;region&gt; key=50 pitch_keycenter=49 sample=alto_01.wav\n&lt;region&gt; key=51 pitch_keycenter=50 sample=alto_02.wav\n&lt;region&gt; key=52 pitch_keycenter=51 sample=alto_03.wav\n&lt;region&gt; key=53 pitch_keycenter=52 sample=alto_04.wav\n&lt;region&gt; key=54 pitch_keycenter=53 sample=alto_05.wav\n&lt;region&gt; key=55 pitch_keycenter=54 sample=alto_06.wav\n&lt;region&gt; key=56 pitch_keycenter=55 sample=alto_07.wav\n&lt;region&gt; key=57 pitch_keycenter=56 sample=alto_08.wav\n&lt;region&gt; key=58 pitch_keycenter=57 sample=alto_09.wav\n</code></pre> <p>Then, for comparison, we can use pitch_keycenter=sample in sfizz. The mapping process will be a lot more faster as we only need to shift the key value using column-editing. The key range is shifted but the root key stay intact.</p> <pre><code>&lt;global&gt;\nseq_length=3\npitch_keycenter=sample\n&lt;group&gt; seq_position=1\n&lt;region&gt; key=49 sample=alto_01.wav\n&lt;region&gt; key=50 sample=alto_02.wav\n&lt;region&gt; key=51 sample=alto_03.wav\n&lt;region&gt; key=52 sample=alto_04.wav\n&lt;region&gt; key=53 sample=alto_05.wav\n&lt;region&gt; key=54 sample=alto_06.wav\n&lt;region&gt; key=55 sample=alto_07.wav\n&lt;region&gt; key=56 sample=alto_08.wav\n&lt;region&gt; key=57 sample=alto_09.wav\n&lt;region&gt; key=58 sample=alto_10.wav\n&lt;group&gt; seq_position=2\n&lt;region&gt; key=49 sample=alto_02.wav\n&lt;region&gt; key=50 sample=alto_03.wav\n&lt;region&gt; key=51 sample=alto_04.wav\n&lt;region&gt; key=52 sample=alto_05.wav\n&lt;region&gt; key=53 sample=alto_06.wav\n&lt;region&gt; key=54 sample=alto_07.wav\n&lt;region&gt; key=55 sample=alto_08.wav\n&lt;region&gt; key=56 sample=alto_09.wav\n&lt;region&gt; key=57 sample=alto_10.wav\n&lt;region&gt; key=58 sample=alto_08.wav\n&lt;group&gt; seq_position=3\n&lt;region&gt; key=49 sample=alto_03.wav\n&lt;region&gt; key=50 sample=alto_01.wav\n&lt;region&gt; key=51 sample=alto_02.wav\n&lt;region&gt; key=52 sample=alto_03.wav\n&lt;region&gt; key=53 sample=alto_04.wav\n&lt;region&gt; key=54 sample=alto_05.wav\n&lt;region&gt; key=55 sample=alto_06.wav\n&lt;region&gt; key=56 sample=alto_07.wav\n&lt;region&gt; key=57 sample=alto_08.wav\n&lt;region&gt; key=58 sample=alto_09.wav\n</code></pre>"}]}